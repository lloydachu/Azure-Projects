Another way to obtain information about Azure Active Directory (Azure
AD) groups is via the Azure Portal or using Azure CLI (Command-Line
Interface). Hereâ€™s how you can use Azure CLI or the Azure Portal,
along with Power Automate (Microsoft Flow) for more automated
solutions.

### Option 1: Using Azure CLI

Azure CLI offers command-line access to Azure resources, and you can
use it to query and manage Azure AD resources, including groups.

#### Prerequisites
1. Install Azure CLI if you haven't already. You can download it
[here](https://docs.microsoft.com/en-us/cli/azure/install-azure-cli).
2. Log in to your Azure account:
```bash
az login
```

#### Step 1: List All Groups
You can list all groups in your Azure Active Directory using the
following command:
```bash
az ad group list --query "[].{Name: displayName, Id: objectId}" --output table
```

#### Step 2: Find Groups with No Members
To find groups with no members:
1. First, get all groups:
```bash
groups=$(az ad group list --query "[].{Id: objectId}" --output tsv)
```
2. Then, loop through each group and check for members:
```bash
for group in $groups; do
member_count=$(az ad group member list --group $group --query
"length(@)" --output tsv)
if [ "$member_count" -eq 0 ]; then
echo "Group with no members: $group"
fi
done
```

#### Step 3: Find Groups with No Owners
To identify groups that do not have owners:
1. Loop through each group and check its owners:
```bash
for group in $groups; do
owner_count=$(az ad group owner list --group $group --query
"length(@)" --output tsv)
if [ "$owner_count" -eq 0 ]; then
echo "Group with no owner: $group"
else
for owner in $(az ad group owner list --group $group
--query "[].userPrincipalName" --output tsv); do
# Check if owner is inactive (you may require additional logic)
owner_status=$(az ad user show --id $owner --query
"accountEnabled" --output tsv)
if [ "$owner_status" == "false" ]; then
echo "Group with inactive owner: $group by owner: $owner"
fi
done
fi
done
```

### Option 2: Using the Azure Portal

The Azure Portal provides a user-friendly interface to manage Azure AD
and view group properties.

#### Steps to Follow:
1. **Navigate to Azure Active Directory** in the Azure Portal.
2. Click on **Groups** to view a list of all groups.
3. **Filter groups**: Although the portal does not have direct filters
for "groups with no members," you can check the member count by
selecting a group and viewing its members.
4. **Review Owners**: Click on any group to see its owners. You can
check manually for owners who have left the organization or are
inactive by checking their account status.

### Option 3: Using Power Automate (Microsoft Flow)

Power Automate can be used to create an automated flow to retrieve,
filter, and store this information without needing command-line
access.

#### Steps to Set Up:
1. **Create a new flow** in Power Automate.
2. Use the **Azure Active Directory Connector** to retrieve groups.
You can use the action **"Get groups"**.
3. For groups with no members, use the **"Get group members"** action
and apply a filter to find groups where the member count is zero.
4. For checking owners, use the **"Get group owners"** action, and
apply logic to find groups without owners or with inactive members
(you might need to check user statuses separately).
5. Output the results to an Excel file, SharePoint list, or send an
email summary.



To achieve this, you'll need to use Azure Active Directory PowerShell commands. Below are steps and commands to help you find all groups with no members, groups with no owner or whose owner is inactive or has left the organization, as well as to list all groups and their owners in your Azure tenant.

### Prerequisites
1. Install the AzureAD module if you haven't already:
```powershell
Install-Module AzureAD
```

2. Connect to your Azure AD account:
```powershell
Connect-AzureAD
```

### Step 1: Get All Groups
Retrieve all groups in your tenant:
```powershell
$groups = Get-AzureADGroup -All $true
```

### Step 2: Find Groups with No Members
```powershell
$groupsWithNoMembers = $groups | Where-Object { (Get-AzureADGroupMember -ObjectId $_.ObjectId).Count -eq 0 }
```

### Step 3: Find Groups with No Owner or Inactive Owner
To check for groups without owners or with inactive owners:
```powershell
$inactiveUsers = Get-AzureADUser -Filter "AccountEnabled eq false"
$groupsWithNoOwnerOrInactiveOwner = @()

foreach ($group in $groups) {
$owners = Get-AzureADGroupOwner -ObjectId $group.ObjectId
if (-not $owners -or ($owners | Where-Object { $inactiveUsers.ObjectId -contains $_.ObjectId })) {
$groupsWithNoOwnerOrInactiveOwner += $group
}
}
```

### Step 4: List All Groups and Their Owners
To list all groups along with their owners:
```powershell
$groupOwnersList = @()

foreach ($group in $groups) {
$owners = Get-AzureADGroupOwner -ObjectId $group.ObjectId | Select-Object DisplayName, UserPrincipalName
foreach ($owner in $owners) {
$groupOwnersList += [PSCustomObject]@{
GroupName = $group.DisplayName
GroupId = $group.ObjectId
OwnerDisplayName = $owner.DisplayName
OwnerUPN = $owner.UserPrincipalName
}
}
}
```

### Output Results
You can output these results to the console or export to CSV:
```powershell
# Export groups with no members
$groupsWithNoMembers | Export-Csv -Path "C:\Path\To\Your\Output\NoMembersGroups.csv" -NoTypeInformation

# Export groups with no owner or inactive owner
$groupsWithNoOwnerOrInactiveOwner | Export-Csv -Path "C:\Path\To\Your\Output\NoOwnerOrInactiveOwnerGroups.csv" -NoTypeInformation

# Export all groups with their owners
$groupOwnersList | Export-Csv -Path "C:\Path\To\Your\Output\GroupOwners.csv" -NoTypeInformation


OR:

# Import the Azure AD module (if not already imported)
Import-Module Az

# Authenticate to Azure
Connect-AzAccount

# Get all groups in Azure AD
$groups = Get-AzADGroup

# Initialize a list to store groups with no owners
$groupsWithNoOwners = @()

# Loop through each group and check for owners
foreach ($group in $groups) {
    $owners = Get-AzADGroupOwner -GroupObjectId $group.Id
    if ($owners.Count -eq 0) {
        $groupsWithNoOwners += [PSCustomObject]@{
            GroupName = $group.DisplayName
            GroupId   = $group.Id
        }
    }
}

# Output groups with no owners
if ($groupsWithNoOwners.Count -gt 0) {
    Write-Output "Groups with no owners:"
    $groupsWithNoOwners | Format-Table -AutoSize
} else {
    Write-Output "No groups without owners were found."
}

# Optionally, export the results to a CSV file
$groupsWithNoOwners | Export-Csv -Path "GroupsWithNoOwners.csv" -NoTypeInformation

Groups Owned by a Particular User:

# Import the Azure AD module (if not already imported)
Import-Module Az

# Authenticate to Azure
Connect-AzAccount

# Define the user's User Principal Name (UPN) or Object ID
$userPrincipalName = "<UserUPN>" # Replace with the user's UPN or Object ID

# Get the user object based on the UPN or Object ID
$user = Get-AzADUser -UserPrincipalName $userPrincipalName

if ($user) {
    # Get all groups owned by the user
    $ownedGroups = Get-AzADGroup | Where-Object {
        (Get-AzADGroupOwner -GroupObjectId $_.Id).Id -contains $user.Id
    }

    # Output the results
    if ($ownedGroups.Count -gt 0) {
        Write-Output "Groups owned by $($user.DisplayName):"
        $ownedGroups | Select-Object DisplayName, Id | Format-Table -AutoSize
    } else {
        Write-Output "No groups owned by $($user.DisplayName) were found."
    }
} else {
    Write-Output "User not found: $userPrincipalName"
}

# Optional: Export the results to a CSV file
$ownedGroups | Select-Object DisplayName, Id | Export-Csv -Path "GroupsOwnedByUser.csv" -NoTypeInformation
